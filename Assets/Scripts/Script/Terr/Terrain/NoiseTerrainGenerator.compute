// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "SNoise.compute"
static const int numThreads = 8;

RWStructuredBuffer<float4> points;
int numPointsPerAxis;
float3 center;
float cubeSize;

int indexFromCoord(uint x, uint y, uint z)
{
    return z * numPointsPerAxis * numPointsPerAxis + y * numPointsPerAxis + x;
}

float4 scaleAndOffset;
int octaves;
float roughness;
float persistance;
float heightScale;

[numthreads(numThreads, numThreads, numThreads)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numPointsPerAxis || id.y >= numPointsPerAxis || id.z >= numPointsPerAxis)
    {
        return;
    }
    int index = indexFromCoord(id.x, id.y, id.z);
    float3 pos = center + id * cubeSize - numPointsPerAxis * cubeSize * 0.5;
    
    //noise
    float3 pos2 = pos * scaleAndOffset.x + scaleAndOffset.yzw;
    float noise = 0;
    float frequency = 1;
    float factor = 1;
    for (int i = 0; i < octaves; i++)
    {
        float3 layervalue = pos2 * frequency;
        noise = noise + snoise(layervalue) * factor;
        factor *= persistance;
        frequency *= roughness;
    }
    points[index] = float4(pos, noise + pos.y * heightScale);

}