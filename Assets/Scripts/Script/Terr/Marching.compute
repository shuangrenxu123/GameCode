// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
struct pointer {
    int value;
};
float halfsize;
float threshold;
float scale;
RWStructuredBuffer<pointer> pointers;
float2 hash22(float2 p)
{
    p = float2(dot(p, float2(127.1, 311.7)), dot(p, float2(269.5, 183.3)));
    return -1.0 + 2.0 * frac(sin(p) * 43758.5453123);
}
float Perlin(float2 p)
{
    float2 pi = floor(p); 
    float2 pf = frac(p); 
   
    //float2 w = pf * pf * (3.0 - 2.0 * pf);
    float2 w = pf * pf * pf * (6 * pf * pf - 15 * pf + 10);
     
    return lerp(lerp(dot(hash22(pi + float2(0.0, 0.0)), pf - float2(0.0, 0.0)),
                    dot(hash22(pi + float2(1.0, 0.0)), pf - float2(1, 0.0)), w.x),
                lerp(dot(hash22(pi + float2(0.0, 1.0)), pf - float2(0.0, 1.0)),
                    dot(hash22(pi + float2(1.0, 1.0)), pf - float2(1.0, 1.0)), w.x), w.y);
}
[numthreads(20,20,1)]
void CSMain (uint3 id : SV_GroupThreadID)
{
    int index = id.x * 20 + id.y;
    float3 center = float3(id.x * halfsize * 2 + halfsize, 0, id.y * halfsize * 2 + halfsize);
    float3 lb = center + halfsize + float3(-1,0,-1);
    float3 lt = center + halfsize + float3(-1,0,1);
    float3 rt = center + halfsize + float3(1,0,1);
    float3 rb = center + halfsize + float3(1,0,-1);
    
    float v1 = 1 - Perlin(float2(lb.x * scale, lb.z * scale));
    float v2 = 1 - Perlin(float2(lt.x * scale, lt.z * scale));
    float v3 = 1 - Perlin(float2(rt.x * scale, rt.z * scale));
    float v4 = 1 - Perlin(float2(rb.x * scale, rb.z * scale));
   
    int lbValue = v1 > threshold ? 1 : 0;
    int ltValue = v2 > threshold ? 2 : 0;
    int rtValue = v3 > threshold ? 4 : 0;
    int rbValue = v4 > threshold ? 8 : 0;
    
    pointers[index].value = lbValue + ltValue + rtValue + rbValue;

}